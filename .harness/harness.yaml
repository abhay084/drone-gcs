pipeline:
  projectIdentifier: Drone_Plugins
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: GitHub_Drone_Plugins_Org
        repoName: drone-gcs
        build: <+input>
        sparseCheckout: []
  stages:
    - stage:
        name: Test
        identifier: Test
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: lint
                  identifier: lint
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: golang:1.22.7
                    shell: Sh
                    command: |-
                      go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
                      golangci-lint version
                      golangci-lint run
              - step:
                  type: Run
                  name: test
                  identifier: Run_1
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: golang:1.22.7
                    shell: Sh
                    command: go test -cover ./...
    - parallel:
        - stage:
            name: linux-amd64
            identifier: linuxamd64
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build Binary
                      identifier: Run_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22.7
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=amd64

                          go build -v -ldflags "-X main.version=" -a -tags netgo -o release/linux/amd64/drone-gcs .
                        envVariables:
                          CGO_ENABLED: "0"
                  - step:
                      type: Plugin
                      name: Build and Push on Tag
                      identifier: Plugin_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/gcs
                          dockerfile: docker/Dockerfile.linux.amd64
                          auto_tag: "true"
                          auto_tag_suffix: linux-amd64
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build And Push on Branch
                      identifier: BuildAndPushDockerRegistry_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/gcs
                        tags:
                          - linux-amd64
                        caching: false
                        dockerfile: docker/Dockerfile.linux.amd64
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"
        - stage:
            identifier: linarm64
            type: CI
            name: linux-arm64
            description: ""
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Linux
                arch: Arm64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      identifier: buildpush
                      type: Run
                      name: Build Binary
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22.7
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=arm64

                          go build -v -ldflags "-X main.version=" -a -tags netgo -o release/linux/arm64/drone-gcs .
                  - step:
                      type: Plugin
                      name: "Build and Push on Tag "
                      identifier: Plugin_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/gcs
                          dockerfile: docker/Dockerfile.linux.arm64
                          auto_tag: "true"
                          auto_tag_suffix: linux-arm64
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build And Push On Branch
                      identifier: BuildAndPushDockerRegistry_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/gcs
                        tags:
                          - linux-arm64
                        caching: false
                        dockerfile: docker/Dockerfile.linux.arm64
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "branch"
        - stage:
            identifier: winamd64
            type: CI
            name: windows-ltsc2022-amd64
            description: ""
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Windows
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      identifier: build_amd64ltsc2022
                      type: Run
                      name: Build Binary
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22.7
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          GOOS=windows

                          go build -v -ldflags "-X main.version=" -a -tags netgo -o release/windows/amd64/drone-gcs.exe .
                  - step:
                      type: Plugin
                      name: Build and Push on Tag
                      identifier: Plugin_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/gcs
                          dockerfile: docker/Dockerfile.windows.ltsc2022
                          auto_tag: "true"
                          auto_tag_suffix: windows-ltsc2022-amd64
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build And Push on Branch
                      identifier: BuildAndPushDockerRegistry_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/gcs
                        tags:
                          - windows-ltsc2022-amd64
                        caching: false
                        dockerfile: docker/Dockerfile.windows.ltsc2022
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "branch"
        - stage:
            identifier: win1809amd64
            type: CI
            name: windows-1809-amd64
            description: ""
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Windows
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      identifier: build_amd64ltsc2022
                      type: Run
                      name: Build Binary
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22.7
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          GOOS=windows

                          go build -v -ldflags "-X main.version=" -a -tags netgo -o release/windows/amd64/drone-gcs.exe .
                  - step:
                      type: Plugin
                      name: Build and Push on Tag
                      identifier: Plugin_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/gcs
                          dockerfile: docker/Dockerfile.windows.1809
                          auto_tag: "true"
                          auto_tag_suffix: windows-1809-amd64
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build And Push on Branch
                      identifier: BuildAndPushDockerRegistry_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/gcs
                        tags:
                          - windows-1809-amd64
                        caching: false
                        dockerfile: docker/Dockerfile.windows.1809
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "branch"
    - stage:
        name: Manifest and Release
        identifier: Manifest_and_Release
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Plugin
                  name: Manifest
                  identifier: Manifest
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: plugins/manifest
                    settings:
                      username: drone
                      password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                      auto_tag: "true"
                      ignore_missing: "true"
                      spec: docker/manifest.tmpl
                  when:
                    stageStatus: Success
                    condition: |
                      <+codebase.build.type> == "tag" || "branch"
              - step:
                  type: Run
                  name: build binaries
                  identifier: Run_1
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: golang:1.22.7
                    shell: Sh
                    command: |-
                      GOOS=linux   GOARCH=amd64   go build -ldflags "-s -w -X main.version=${DRONE_TAG##v}" -a -tags netgo  -o release/plugin-linux-amd64
                      GOOS=linux   GOARCH=arm64   go build -ldflags "-s -w -X main.version=${DRONE_TAG##v}" -a -tags netgo  -o release/plugin-linux-arm64
                      GOOS=darwin  GOARCH=arm64   go build -ldflags "-s -w -X main.version=${DRONE_TAG##v}" -a -tags netgo  -o release/plugin-darwin-arm64
                      GOOS=windows GOARCH=amd64   go build -ldflags "-s -w -X main.version=${DRONE_TAG##v}" -a -tags netgo  -o release/plugin-windows-amd64

                      apt-get update -y
                      apt-get install -y zstd
                      zstd release/plugin-linux-amd64
                      zstd release/plugin-linux-arm64
                      zstd release/plugin-darwin-arm64
                      zstd release/plugin-windows-amd64
                    envVariables:
                      CGO_ENABLED: "0"
                      GO111MODULE: "on"
                  when:
                    stageStatus: Success
                    condition: |
                      <+codebase.build.type> == "tag"
              - step:
                  type: Plugin
                  name: Release
                  identifier: Release
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: plugins/github-release
                    settings:
                      api_key: <+secrets.getValue("ci_job_github_pat")>
                      title: <+trigger.tag>
                      files: release/plugin-linux-amd64.zst,release/plugin-linux-arm64.zst,release/plugin-darwin-arm64.zst,release/plugin-windows-amd64.zst
                  when:
                    stageStatus: Success
                    condition: <+codebase.build.type> == "tag"
              - step:
                  name: Upload_Binaries_To_GCS
                  identifier: Upload_Binaries_To_GCS
                  template:
                    templateRef: Upload_Binary_GCS_TI
                    versionLabel: v1
                    templateInputs:
                      type: GCSUpload
                      spec:
                        sourcePath: /harness/release
                        target: drone-gcs/<+trigger.tag>/
                      when:
                        condition: <+codebase.build.type> == "tag"
        variables:
          - name: DRONE_REPO_OWNER
            type: String
            description: ""
            required: false
            value: drone-plugins
  allowStageExecutions: true
  identifier: dronegcsharness
  name: drone-gcs-harness
